<?php

namespace CardGame;

use CardGame\Util\Helpers;
use CardGame\Interfaces\ICard;
//use Exception;
//use LogicException;
use CardGame\Exceptions\DeckIsEmpty;

class Deck
{
    /**
	 * This saves the cardBuilder class name returned by CardFactory
	 */
	private ?object $card;

	 /**
	 * This saves the decks generated by the cardBuilder class for selected cardTypes	 * 
	 */
	protected static array $decks = [];
    
	/**
	 * Takes in the Icard instance and uses to call the create method
	 * which decides on which CardType cardBuilder class to be instantiated
	 * 
	 * @param object Icard
	 * @return object CardBuilder
	 * @throws Exception
	 */
	public function __construct(ICard $cardFactory)
	{
		try {
			$this->card =  $cardFactory->create();
		} catch (\Exception $e) {
			throw new \Exception($e->getMessage());
		}
	}
	/**
	 * Calls the CardBuilder class to build the cards
	 *
	 * @return array
	 * @throws \Exception
	 */
	protected function getDecks()
	{
		try {
			return (new $this->card())->build();
		} catch (\Exception $e) {
			throw new \LogicException("Class not found");
		}
	}

	/**
	 * Shuffles an array of cards.
	 * Choose from the combinations of decks and pass to the shuffle array helper function
	 *
	 * @return array
	 * @throws Exception
	 */
	private static function shuffle()
	{
		$choose_random_cardset = static::$decks[mt_rand(0, count(static::$decks) - 1)];	//randomnly choose between different combinations of cards provided
		try {
			return Helpers::shuffle_array($choose_random_cardset, 5, 1 === random_int(0, 1));
		} catch (\Exception $e) {
			throw new \Exception($e->getMessage());
		}
	}

	/**
	 * Returns array of shuffled cards chose to be served.
	 * 
	 * @return array
	 */
	public function serveCards(): array
	{		
		static::$decks = $this->getDecks();
		if(count(static::$decks) == 0)
		   throw new DeckIsEmpty('Deck is empty and the game exits');
		return static::shuffle();
	}
}
